Funciones (argumentos, `return`)

Las funciones son una parte muy importante de todo lenguaje de programacion. Son tipos particulares de Objetos, llamados callable objects u objetos invocables, por lo que tienen las mismas propiedades que cualquier objeto.
Teniendo un conjunto de variables neceitamos la funciones para calcularla, cambiarlas, etc.
 
Hay tres formas en que podemos construir una función:

function miFuncion() {}

var otraFuncion = function () {};

var yOtra = () => {};

function miFuncion() {}
Una función comenzara con la palabra clave function, luego de esto viene el nombre de mi funcion, es decir el nombre de que se trata lo que quiero hacer.
Despues vienen los párentisis uno abierto y cerrado. 
Dentro de los corchetes ponemos el codigo de lo que queremos hacer.
ejemplo:
function logHola() {
    console.log('hola!');
}

logHola();

Funcion con Argumentos
Despues de ejecutar una funcion básica, podemos pasar argumento a dicha function.

ejemplo:

function logHola(nombre) {
    console.log('Hola, ' + nombre);
}
logHola('Martin');

Si agregamos una variable dentro de los párentisis del nombre de nuestra función, iniciamos el valor de una variable pasandola a la funcion cuando la llamemos.
En este caso nombre = Martin
Tambien podemos hacer multiples argumentos, solo que debemos separarlo por coma.
Ejemplo:

function logHola(nombre) {
    console.log( `Hola, ${nombre}`);
}

var miNombre = 'Antonio';
logHola(miNombre);

Declaración “return” y Scope

function sumarDosNumeros(a, b) {
  var suma = a + b;
  return suma;
}

sumarDosNumeros(1, 5); // 6

En este ejemplo utilizamos la declaracion return, no usamos console.log() como todo lo que salga en una función.
Lo que queremos hacer es devolver algo, en este caso es la suma de dos numeros. Pensemos el la declaracion de retorno (return) como la unica forma para que el elemento escape de la función.
No se puede acceder a nada mas que a lo que se devuelve fuera de la función.
Hay que tener en cuenta que cuando una función golpea una declaracion de retorno, la funcion detiene inmediantamente lo que esta asiendo y devuelve lo especificado.

function dividirDosNumeros(a, b) {
  var producto = a / b;
  return producto;
}

dividirDosNumeros(6, 3); // 2
console.log(producto); // undefined

En este caso si intentamos (console.log) algo que declaramos dentro de la función, 
devolverá undefined porque no tenemos acceso a él fuera de la función. 
Esto se llama Scope (“alcance”). La única forma de acceder a algo dentro de la función es devolverlo.

También podemos establecer variables para igualar lo que devuelve una función.
function restarDosNumeros(a, b) {
  var diferencia = a - b;
  return diferencia;
}

var diferenciaDeResta = restarDosNumeros(10, 9);
console.log(diferenciaDeResta); // 1
console.log(diferencia); // undefined